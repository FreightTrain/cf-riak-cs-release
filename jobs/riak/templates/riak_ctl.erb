#!/bin/bash -x

# Control script to start/stop ruby/rack riak job on a BOSH controlled VM
#
# This script can be run manually. Examples below assume you are in the root of this release project.
#
# Start process example:
# APP_DIR=/path/to/riak RACK_ENV=development COMMAND=shotgun PORT=9393 jobs/riak/templates/riak_ctl start
#
# View STDOUT/STDERR logs:
# jobs/riak/templates/riak_ctl logs
#
# Clear logs:
# jobs/riak/templates/riak_ctl clearlogs

# TODO - change "EXECUTABLE_SERVER" to the command to run

JOB_DIR=/var/vcap/jobs/riak
RUN_DIR=/var/vcap/sys/run/riak
RUN_DIR2=/var/vcap/sys/run/riak-admin
LOG_DIR=/var/vcap/sys/log/riak
STORE_DIR=/var/vcap/store/riak
PIDFILE=$RUN_DIR/riak.pid
IP_ADDR=<%= spec.networks.send(spec.networks.methods(false).first).ip %>

export PATH=/var/vcap/packages/ruby/bin:$PATH
export HOME=${STORE_DIR}

RIAK_BIN="/var/vcap/packages/riak/rel/bin/riak"
RIAK_ADMIN="/var/vcap/packages/riak/rel/bin/riak-admin"
HOME=${HOME:-/home/vcap}

case $1 in

  start)
    for DIR in $RUN_DIR $RUN_DIR2 $LOG_DIR $STORE_DIR 
      do
        mkdir -p $DIR
        chown vcap:vcap $DIR
      done

    ln -s ${JOB_DIR}/etc ${STORE_DIR}

    # Set the max open file limit
    ulimit -n 65536

    <% if properties.riak.firewall_enabled %>
      bash ${JOB_DIR}/restrict_riak_requests_to_cluster_ip_range.sh
    <% end %>

    # Start riak
    ${RIAK_BIN} start 1>${LOG_DIR}/riak_ctl.stdout 2>${LOG_DIR}/riak_ctl.stderr

    # Join the cluster if we aren't the seed node
    if [ "$IP_ADDR" != "<%= properties.riak.seed_node %>" ]
    then
      bash ${JOB_DIR}/bin/join_cluster.sh 1>${LOG_DIR}/riak_ctl.stdout 2>${LOG_DIR}/riak_ctl.stderr
    fi

    ;;

  stop)
    ${RIAK_BIN} stop 1>${LOG_DIR}/riak_ctl.stdout 2>${LOG_DIR}/riak_ctl.stderr
    rm -f $PIDFILE
    ;;

  logs)
    cat $LOG_DIR/*
    ;;

  tail)
    tail -f $LOG_DIR/*
    ;;

  clearlogs)
    rm $LOG_DIR/*
    ;;

  *)
    echo "Usage: riak_ctl {start|stop|logs|tail|clearlogs}" ;;
esac
exit 0
